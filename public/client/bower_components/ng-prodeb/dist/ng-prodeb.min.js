"use strict";!function(){angular.module("ngProdeb",["ngMaterial","md.data.table","ngMaterialDatePicker","text-mask","angularFileUpload"])}(),function(){function n(n,e,o,t,r){n.theme("default").primaryPalette("indigo").accentPalette("amber"),o.locale("pt-BR"),o.createFromInputFallback=function(n){n._d=new Date(n._i)},r.errorOnUnhandledRejections(!1),angular.forEach(t,function(n){e.icon(n.id,n.url)})}n.$inject=["$mdThemingProvider","$mdIconProvider","moment","PrIcons","$qProvider"],angular.module("ngProdeb").config(n)}(),function(){angular.module("ngProdeb").constant("lodash",_).constant("_",_).constant("alasql",alasql).constant("moment",moment)}(),function(){function n(n,e){angular.forEach(e,function(e){n.put(e.url,e.svg)})}n.$inject=["$templateCache","PrIcons"],angular.module("ngProdeb").run(n)}(),function(){angular.module("ngProdeb").component("prDateTimePicker",{template:'\n          <md-input-container class="md-block" flex="$ctrl.flex">\n            <label for="$ctrl.id">{{$ctrl.label}}</label>\n            <md-icon md-font-set="material-icons" class="md-warn"\n              ng-style="$ctrl.style.label"\n              ng-click="$ctrl.show(true)"\n              md-colors="$ctrl.colors.icon">date_range</md-icon>\n            <input\n              id="$ctrl.id"\n              ng-model="$ctrl.ngModel"\n              ng-click="$ctrl.show(false)"\n              ng-readonly="$ctrl.clickToShowInField"\n              text-mask="$ctrl.maskConfig"\n              type="text">\n            </input>\n          </md-input-container>\n        ',controller:["mdcDateTimeDialog","moment",function(n,e){function o(n){return angular.isUndefined(n)||n}var t=this;t.$onInit=function(){t.style={label:{cursor:"pointer"}},t.autoOk=o(t.autoOk),t.withMinutesPicker=o(t.withMinutesPicker),t.clickToShowInField=o(t.clickToShowInField),t.format=t.format||t.withTime?"DD/MM/YYYY HH:mm":"DD/MM/YYYY",t.defineMask(),t.defineColors()},t.defineColors=function(){t.colors={icon:{color:t.iconColor?t.iconColor:"default-grey-900"}}},t.defineMask=function(){angular.isUndefined(t.mask)&&(t.mask=[/\d/,/\d/,"/",/\d/,/\d/,"/",/\d/,/\d/,/\d/,/\d/],t.withTime&&(t.mask=t.mask.concat([" ",/\d/,/\d/,":",/\d/,/\d/]))),t.maskConfig={mask:t.mask,guide:!1}},t.show=function(o){(t.clickToShowInField||o)&&n.show({maxDate:angular.isUndefined(t.maxDate)?null:t.maxDate,format:t.format,minutes:t.withMinutesPicker,currentDate:t.ngModel,autoOk:t.autoOk,cancelText:"Cancelar",todayText:"Hoje",time:t.withTime,date:!0}).then(function(n){t.ngModel=e(n).format(t.format)})}}],require:{ngModelCtrl:"ngModel"},bindings:{label:"=",minDate:"=",maxDate:"=",ngModel:"<",id:"<",iconColor:"<",withTime:"<",withMask:"<",withMinutesPicker:"<",clickToShowInField:"<",autoOk:"<",format:"<",flex:"<",mask:"<"}})}(),function(){function n(n,e,o,t,r,a){function i(e){if(!angular.isObject(e))return void n.error("PrDialog: Parâmetro inválido, é esperando um objeto como parâmetro.");var o={hasBackdrop:!1,escapeToClose:!1,bindToController:!0,clickOutsideToClose:!0,autoWrap:!0,skipHide:!0,locals:{},zIndex:75,fullscreen:!1};return angular.isDefined(e.locals)&&(o.locals=e.locals,delete e.locals),angular.merge(o,e)}function l(n){var o=i(n);return o.locals={title:angular.isDefined(o.title)?o.title:"Exception",description:angular.isDefined(o.description)?o.description:"",okBgColor:angular.isDefined(o.okBgColor)?o.okBgColor:"red-A700",toolbarBgColor:angular.isDefined(o.toolbarBgColor)?o.toolbarBgColor:"red-A700"},o.template=' <md-dialog flex=50 aria-label="'+o.locals.title+'">\n              <md-toolbar md-scroll-shrink md-colors="::{background:\'default-{{ctrl.toolbarBgColor}}\'}">\n                <div class="md-toolbar-tools">\n                  <h3>\n                    <span>'+o.locals.title+"</span>\n                  </h3>\n                </div>\n              </md-toolbar>\n              <md-dialog-content layout-margin>\n                <p>"+o.locals.description+'</p>\n              </md-dialog-content>\n              <md-dialog-actions>\n                <md-button class="md-raised"\n                  md-colors="::{background:\'default-{{ctrl.okBgColor}}\'}"\n                  ng-click="ctrl.okAction()">Ok</md-button>\n              </md-dialog-actions>\n            </md-dialog>\n          ',o.controller=["$mdDialog",function(n){function e(){n.hide()}var o=this;o.okAction=e}],o.controllerAs="ctrl",o.clickOutsideToClose=!1,o.hasBackdrop=!0,e.show(o)}function c(n){var o=i(n);return o.template=' <md-dialog flex=50 aria-label="{{::ctrl.title}}">\n              <md-toolbar md-scroll-shrink>\n                <div class="md-toolbar-tools">\n                  <h3>\n                    <span>{{::ctrl.title}}</span>\n                  </h3>\n                </div>\n              </md-toolbar>\n              <md-dialog-content layout-margin>\n                <p>{{::ctrl.description}}</p>\n              </md-dialog-content>\n              <md-dialog-actions>\n                <md-button class="md-raised"\n                  md-colors="::{background:\'default-{{ctrl.yesBgColor}}\'}"\n                  ng-click="ctrl.yesAction()">Sim</md-button>\n                <md-button class="md-raised"\n                  md-colors="::{background:\'default-{{ctrl.noBgColor}}\'}"\n                  ng-click="ctrl.noAction()">Não</md-button>\n              </md-dialog-actions>\n            </md-dialog>\n          ',o.locals={title:angular.isDefined(o.title)?o.title:"",description:angular.isDefined(o.description)?o.description:"",yesBgColor:angular.isDefined(o.yesBgColor)?o.yesBgColor:"primary",noBgColor:angular.isDefined(o.noBgColor)?o.noBgColor:"accent"},o.controller=["$mdDialog",function(n){function e(){n.cancel()}function o(){n.hide()}var t=this;t.noAction=e,t.yesAction=o}],o.controllerAs="ctrl",o.clickOutsideToClose=!1,o.hasBackdrop=!0,e.show(o)}function s(o){var t=i(o);return angular.isUndefined(t.templateUrl)&&angular.isUndefined(t.template)?void n.error("PrDialog: templateUrl ou template indefinido, é esperando um templateUrl ou um template como atributo."):(t=u(t),t.hasBackdrop=!1,e.show(t))}function u(n){if(n.hasBackdrop){var e=o.createBackdrop(t,"md-dialog-backdrop md-opaque md-backdrop-custom");r.enter(e,angular.element(a.find("body")));var i=n.onRemoving;n.onRemoving=function(){e.remove(),angular.isFunction(i)&&i.call()};var l=n.onComplete;n.onComplete=function(e,o){var t=parseInt(n.zIndex,10);angular.element(a[0].querySelector(".md-backdrop-custom")).css("z-index",t),o.css("z-index",t+1),angular.isFunction(l)&&l.call()}}return n}function d(){e.hide()}return{custom:s,confirm:c,close:d,alert:l}}n.$inject=["$log","$mdDialog","$mdUtil","$rootScope","$animate","$document"],angular.module("ngProdeb").factory("PrDialog",n)}(),function(){function n(n,e,o){function t(e,o,t,r){var a={headers:!0};return angular.isObject(r)&&angular.merge(a,r),angular.isUndefined(t)&&(t="export"),a.where=angular.isDefined(a.where)?" WHERE "+a.where:" ",a.orderBy=angular.isDefined(a.orderBy)?" ORDER BY "+a.orderBy:" ",t=t+"."+a.formatTo,n.promise("SELECT "+i(e)+" INTO "+a.formatTo.toUpperCase()+"(?, ?) FROM ? "+a.where+a.orderBy,[t,a,o])}function r(n,e,o,r){return angular.isUndefined(r)&&(r={}),r.formatTo="csv",t(n,e,o,r)}function a(n,e,o,r){return angular.isUndefined(r)&&(r={}),r.formatTo="xlsx",t(n,e,o,r)}function i(n){return angular.isArray(n)&&(n=e.map(n,function(n){return n.name+" as ["+n.label+"]"}).join(", ")),n}var l={exportToExcel:a,exportToCSV:r};return n.fn.formatDate=function(n,e){return o("prDate")(n,e)},l}n.$inject=["alasql","lodash","$filter"],angular.module("ngProdeb").factory("PrFile",n)}(),function(){function n(n){return function(e,o){var t="DD/MM/YYYY";return angular.isDefined(o)?n(e,o).format(t):n(e).format(t)}}n.$inject=["moment"],angular.module("ngProdeb").filter("prDate",n)}(),function(){function n(n){return function(e){return n(e).format("DD/MM/YYYY HH:mm")}}n.$inject=["moment"],angular.module("ngProdeb").filter("prDatetime",n)}(),function(){function n(n){return function(e){return n("currency")(e,"R$ ")}}n.$inject=["$filter"],angular.module("ngProdeb").filter("real",n)}(),function(){angular.module("ngProdeb").constant("PrIcons",[{id:"pr-excel",url:"pr-excel.svg",svg:'<svg height="24" width="24" style="fill:#2E7D32" viewBox="0 0 24 24"><path d="M6,2H14L20,8V20A2,2 0 0,1 18,22H6A2,2 0 0,1 4,20V4A2,2 0 0,1 6,2M13,3.5V9H18.5L13,3.5M17,11H13V13H14L12,14.67L10,13H11V11H7V13H8L11,15.5L8,18H7V20H11V18H10L12,16.33L14,18H13V20H17V18H16L13,15.5L16,13H17V11Z" /></svg>'}])}(),function(){function n(){return{restrict:"AE",scope:{paginator:"="},template:'\n        <section class="pr-pagination" layout="row">\n          <section layout="row" layout-align="center center" layout-wrap\n            style="margin-right: 10px"\n            ng-show="paginator.numberOfPages > 1">\n              <md-button class="md-raised"\n                ng-disabled="paginator.currentPage === 1"\n                ng-click="paginator.goToPage(1)">{{paginator.options.labels.first}}</md-button>\n              <md-button class="md-raised"\n                ng-disabled="paginator.currentPage === 1"\n                ng-click="paginator.previousPage()">{{paginator.options.labels.previous}}</md-button>\n              <md-button class="md-raised"\n                ng-repeat="n in paginator.pages(s)"\n                ng-class="{\'md-primary\': n == paginator.currentPage}"\n                ng-click="paginator.goToPage(n)"\n                ng-bind="n">1</md-button>\n            <md-button class="md-raised"\n              ng-disabled="paginator.currentPage == paginator.numberOfPages"\n              ng-click="paginator.nextPage()">{{paginator.options.labels.next}}</md-button>\n            <md-button class="md-raised"\n              ng-disabled="paginator.currentPage == paginator.numberOfPages"\n              ng-click="paginator.goToPage(paginator.numberOfPages)">{{paginator.options.labels.last}}</md-button>\n          </section>\n          <section layout="row" layout-align="center center"\n            ng-show="paginator.total > 0">\n            <md-button class="md-raised" style="cursor: default;"\n              ng-disabled="true" md-colors="::{background:\'default-accent\'}">Total: {{paginator.total}} registro(s)</md-button>\n          </section>\n        </section>'}}angular.module("ngProdeb").directive("prPagination",n)}(),function(){function n(){var n=function(n,e,o){var t={maxPages:10,labels:{first:"««",previous:"«",next:"»",last:"»»"}};angular.isUndefined(e)&&(e=10),angular.isDefined(o)&&(angular.isDefined(o.maxPages)&&(t.maxPages=o.maxPages),angular.isDefined(o.labels)&&(t.labels=o.labels)),t.maxPagesInner=Math.floor(t.maxPages/2),this.searchMethod=n,this.numberOfPages=1,this.total=0,this.perPage=e,this.currentPage=0,this.options=t};return n.prototype.calcNumberOfPages=function(n){this.total=n,n<=0?this.numberOfPages=1:this.numberOfPages=Math.floor(n/this.perPage)+(n%this.perPage>0?1:0)},n.prototype.pages=function(){for(var n=[],e=1;e<=this.numberOfPages;e++)this.currentPage===e?n.push(e):this.currentPage<=this.options.maxPagesInner+1?e<=this.options.maxPages&&n.push(e):e>=this.currentPage-this.options.maxPagesInner&&e<=this.currentPage+this.options.maxPagesInner&&n.push(e);return n},n.prototype.previousPage=function(){this.currentPage>1&&this.searchMethod(this.currentPage-1)},n.prototype.nextPage=function(){this.currentPage<this.numberOfPages&&this.searchMethod(this.currentPage+1)},n.prototype.goToPage=function(n){n>=1&&n<=this.numberOfPages&&this.searchMethod(n)},{getInstance:function(e,o,t){return new n(e,o,t)}}}angular.module("ngProdeb").factory("PrPagination",n)}(),function(){angular.module("ngProdeb").component("prSpinner",{template:'\n        <md-progress-linear class="spin-label-component {{::$ctrl.color}}"\n          ng-style="$ctrl.style"\n          md-mode="indeterminate"\n          ng-show="$ctrl.spinner && $ctrl.spinner.show"></md-progress-linear>\n        ',bindings:{position:"@",color:"@"},controller:["$scope",function(n){var e=this;e.$onInit=function(){e.style={position:angular.isDefined(e.position)?e.position:"fixed"},angular.isUndefined(e.color)&&(e.color="md-primary")},e.spinner={show:!1},n.$on("show-spinner",function(){e.spinner={show:!0}}),n.$on("hide-spinner",function(){e.spinner={show:!1}})}]})}(),function(){function n(n){function e(){n.$broadcast("show-spinner")}function o(){n.$broadcast("hide-spinner")}return{show:e,hide:o}}n.$inject=["$rootScope"],angular.module("ngProdeb").factory("PrSpinner",n)}(),function(){function n(n,e,o,t){function r(e,t,r){if(e){var a={template:'\n            <md-toast>\n              <div class="md-toast-content" md-colors="::{background:\''+t+'\'}">\n                <span class="md-toast-text" flex>'+e+"</span>\n              </div>\n            </md-toast>\n          ",position:"top right"};return angular.isObject(r)&&(a=angular.merge(a,r)),n.show(a)}o.debug("Mensagem para ser exibida no Toast não foi informada")}function a(e){return n.hide(e)}function i(n,e){return r(n,"green",e)}function l(n){var o=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};if(angular.isObject(n)){var a="";if(g(n)){a+="Message: "+n.message+"<br/>Source: "+n.source+"<br/>Line: "+n.line+"<br/><br/>StackTrace: ";var i=n.stacktrace.split(" at ");return i.length>0?i.forEach(function(n,e){a+="<br/>Step "+(e+1)+": "+n}):a+=n.stacktrace,t.alert({title:"Exception",description:a})}e.forIn(n,function(n){a+=c(n)}),n=a}else angular.isArray(n)&&(n=c(n));return r(n,"red-A700",o)}function c(n){var e="";return angular.isArray(n)?n.forEach(function(n){e+=n+"<br/>"}):e+=n+"<br/>",e}function s(n,e,o){m.error(angular.isArray(n)||angular.isObject(n)?n:e,o)}function u(n,e){return r(n,"teal",e)}function d(n,e){return r(n,"warn",e)}function g(n){return angular.isObject(n)&&angular.isDefined(n.line)&&angular.isDefined(n.source)&&angular.isDefined(n.stacktrace)}var m={success:i,error:l,errorValidation:s,info:u,warn:d,hide:a};return m}n.$inject=["$mdToast","lodash","$log","PrDialog"],angular.module("ngProdeb").factory("PrToast",n)}(),function(){angular.module("ngProdeb").directive("prUploaderBase64",["$q",function(n){var e=Array.prototype.slice;return{restrict:"A",require:"?ngModel",link:function(o,t,r,a){a&&(a.$render=function(){},t.bind("change",function(o){function t(e){var o=n.defer(),t=new FileReader;return t.onload=function(n){o.resolve(n.target.result)},t.onerror=function(n){o.reject(n)},t.readAsDataURL(e),o.promise}var r=o.target;n.all(e.call(r.files,0).map(t)).then(function(n){r.multiple?a.$setViewValue(n):a.$setViewValue(n.length?n[0]:null)})}))}}}])}();
//# sourceMappingURL=data:application/json;base64,
