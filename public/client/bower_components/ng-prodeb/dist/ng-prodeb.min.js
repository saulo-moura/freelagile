"use strict";!function(){angular.module("ngProdeb",["ngMaterial","md.data.table","ngMaterialDatePicker","angularFileUpload"])}(),function(){function n(n,e,t,r,a){n.theme("default").primaryPalette("indigo").accentPalette("amber"),t.locale("pt-BR"),t.createFromInputFallback=function(n){n._d=new Date(n._i)},a.errorOnUnhandledRejections(!1),angular.forEach(r,function(n){e.icon(n.id,n.url)})}n.$inject=["$mdThemingProvider","$mdIconProvider","moment","PrIcons","$qProvider"],angular.module("ngProdeb").config(n)}(),function(){angular.module("ngProdeb").constant("lodash",_).constant("alasql",alasql).constant("moment",moment)}(),function(){function n(n,e){angular.forEach(e,function(e){n.put(e.url,e.svg)})}n.$inject=["$templateCache","PrIcons"],angular.module("ngProdeb").run(n)}(),function(){angular.module("ngProdeb").directive("prDateTimePicker",["moment",function(n){function e(e){var t=angular.isUndefined(e.autoOk)||"true"===e.autoOk,r=angular.isDefined(e.withTime)&&"true"===e.withTime,a=angular.isUndefined(e.withMinutesPicker)||"true"===e.withMinutesPicker,o=e.format||(r?"DD/MM/YYYY HH:mm":"DD/MM/YYYY");return'\n            <input\n              id="'+e.id+'"\n              mdc-datetime-picker\n              ng-model="ngModel"\n              show-todays-date\n              date="true"\n              time="'+r+'"\n              minutes="'+a+'"\n              cancel-text="Cancelar"\n              today-text="Hoje"\n              auto-ok="'+t+'"\n              format="'+o+'"\n              min-date="'+(angular.isDefined(e.minDate)?n(e.minDate).format(o):"")+'"\n              max-date="\''+(angular.isDefined(e.maxDate)?n(e.maxDate).format(o):"")+"'\">\n            </input>\n        "}return{template:function t(n,r){var t=e(r);return t},scope:{ngModel:"=",layout:"=",id:"=",withTime:"=?",withMinutesPicker:"=?",autoOk:"=?",format:"=?",minDate:"=?",maxDate:"=?"}}}])}(),function(){function n(n,e,t,r,a,o){function i(e){if(!angular.isObject(e))return void n.error("PrDialog: Parâmetro inválido, é esperando um objeto como parâmetro.");var t={hasBackdrop:!1,escapeToClose:!1,bindToController:!0,clickOutsideToClose:!0,autoWrap:!0,skipHide:!0,locals:{},zIndex:75,fullscreen:!1};return angular.isDefined(e.locals)&&(t.locals=e.locals,delete e.locals),angular.merge(t,e)}function l(n){var t=i(n);return t.template=' <md-dialog flex=50 aria-label="{{::ctrl.title}}">\n              <md-toolbar md-scroll-shrink>\n                <div class="md-toolbar-tools">\n                  <h3>\n                    <span>{{::ctrl.title}}</span>\n                  </h3>\n                </div>\n              </md-toolbar>\n              <md-dialog-content layout-margin>\n                <p>{{::ctrl.description}}</p>\n              </md-dialog-content>\n              <md-dialog-actions>\n                <md-button class="md-raised"\n                  md-colors="::{background:\'default-{{ctrl.yesBgColor}}\'}"\n                  ng-click="ctrl.yesAction()">Sim</md-button>\n                <md-button class="md-raised"\n                  md-colors="::{background:\'default-{{ctrl.noBgColor}}\'}"\n                  ng-click="ctrl.noAction()">Não</md-button>\n              </md-dialog-actions>\n            </md-dialog>\n          ',t.locals={title:angular.isDefined(t.title)?t.title:"",description:angular.isDefined(t.description)?t.description:"",yesBgColor:angular.isDefined(t.yesBgColor)?t.yesBgColor:"primary",noBgColor:angular.isDefined(t.noBgColor)?t.noBgColor:"accent"},t.controller=["$mdDialog",function(n){function e(){n.cancel()}function t(){n.hide()}var r=this;r.noAction=e,r.yesAction=t}],t.controllerAs="ctrl",t.clickOutsideToClose=!1,t.hasBackdrop=!0,e.show(t)}function s(t){var r=i(t);return angular.isUndefined(r.templateUrl)&&angular.isUndefined(r.template)?void n.error("PrDialog: templateUrl ou template indefinido, é esperando um templateUrl ou um template como atributo."):(r=u(r),r.hasBackdrop=!1,e.show(r))}function u(n){if(n.hasBackdrop){var e=t.createBackdrop(r,"md-dialog-backdrop md-opaque md-backdrop-custom");a.enter(e,angular.element(o.find("body")));var i=n.onRemoving;n.onRemoving=function(){e.remove(),angular.isFunction(i)&&i.call()};var l=n.onComplete;n.onComplete=function(e,t){var r=parseInt(n.zIndex,10);angular.element(o[0].querySelector(".md-backdrop-custom")).css("z-index",r),t.css("z-index",r+1),angular.isFunction(l)&&l.call()}}return n}function c(){e.hide()}return{custom:s,confirm:l,close:c}}n.$inject=["$log","$mdDialog","$mdUtil","$rootScope","$animate","$document"],angular.module("ngProdeb").factory("PrDialog",n)}(),function(){function n(n,e,t){function r(e,t,r,a){var o={headers:!0};return angular.isObject(a)&&angular.merge(o,a),angular.isUndefined(r)&&(r="export"),o.where=angular.isDefined(o.where)?" WHERE "+o.where:" ",o.orderBy=angular.isDefined(o.orderBy)?" ORDER BY "+o.orderBy:" ",r=r+"."+o.formatTo,n.promise("SELECT "+i(e)+" INTO "+o.formatTo.toUpperCase()+"(?, ?) FROM ? "+o.where+o.orderBy,[r,o,t])}function a(n,e,t,a){return angular.isUndefined(a)&&(a={}),a.formatTo="csv",r(n,e,t,a)}function o(n,e,t,a){return angular.isUndefined(a)&&(a={}),a.formatTo="xlsx",r(n,e,t,a)}function i(n){return angular.isArray(n)&&(n=e.map(n,function(n){return n.name+" as ["+n.label+"]"}).join(", ")),n}var l={exportToExcel:o,exportToCSV:a};return n.fn.formatDate=function(n,e){return t("prDate")(n,e)},l}n.$inject=["alasql","lodash","$filter"],angular.module("ngProdeb").factory("PrFile",n)}(),function(){function n(n){return function(e,t){var r="DD/MM/YYYY";return angular.isDefined(t)?n(e,t).format(r):n(e).format(r)}}n.$inject=["moment"],angular.module("ngProdeb").filter("prDate",n)}(),function(){function n(n){return function(e){return n(e).format("DD/MM/YYYY HH:mm")}}n.$inject=["moment"],angular.module("ngProdeb").filter("prDatetime",n)}(),function(){function n(n){return function(e){return n("currency")(e,"R$ ")}}n.$inject=["$filter"],angular.module("ngProdeb").filter("real",n)}(),function(){angular.module("ngProdeb").constant("PrIcons",[{id:"pr-excel",url:"pr-excel.svg",svg:'<svg height="24" width="24" style="fill:#2E7D32" viewBox="0 0 24 24"><path d="M6,2H14L20,8V20A2,2 0 0,1 18,22H6A2,2 0 0,1 4,20V4A2,2 0 0,1 6,2M13,3.5V9H18.5L13,3.5M17,11H13V13H14L12,14.67L10,13H11V11H7V13H8L11,15.5L8,18H7V20H11V18H10L12,16.33L14,18H13V20H17V18H16L13,15.5L16,13H17V11Z" /></svg>'}])}(),function(){function n(){return{restrict:"AE",scope:{paginator:"="},template:'\n        <section class="pr-pagination" layout="row">\n          <section layout="row" layout-align="center center" layout-wrap\n            style="margin-right: 10px"\n            ng-show="paginator.numberOfPages > 1">\n              <md-button class="md-raised"\n                ng-disabled="paginator.currentPage === 1"\n                ng-click="paginator.goToPage(1)">{{paginator.options.labels.first}}</md-button>\n              <md-button class="md-raised"\n                ng-disabled="paginator.currentPage === 1"\n                ng-click="paginator.previousPage()">{{paginator.options.labels.previous}}</md-button>\n              <md-button class="md-raised"\n                ng-repeat="n in paginator.pages(s)"\n                ng-class="{\'md-primary\': n == paginator.currentPage}"\n                ng-click="paginator.goToPage(n)"\n                ng-bind="n">1</md-button>\n            <md-button class="md-raised"\n              ng-disabled="paginator.currentPage == paginator.numberOfPages"\n              ng-click="paginator.nextPage()">{{paginator.options.labels.next}}</md-button>\n            <md-button class="md-raised"\n              ng-disabled="paginator.currentPage == paginator.numberOfPages"\n              ng-click="paginator.goToPage(paginator.numberOfPages)">{{paginator.options.labels.last}}</md-button>\n          </section>\n          <section layout="row" layout-align="center center"\n            ng-show="paginator.total > 0">\n            <md-button class="md-raised" style="cursor: default;"\n              ng-disabled="true" md-colors="::{background:\'accent\'}">Total: {{paginator.total}} registro(s)</md-button>\n          </section>\n        </section>'}}angular.module("ngProdeb").directive("prPagination",n)}(),function(){function n(){var n=function(n,e,t){var r={maxPages:10,labels:{first:"««",previous:"«",next:"»",last:"»»"}};angular.isUndefined(e)&&(e=10),angular.isDefined(t)&&(angular.isDefined(t.maxPages)&&(r.maxPages=t.maxPages),angular.isDefined(t.labels)&&(r.labels=t.labels)),r.maxPagesInner=Math.floor(r.maxPages/2),this.searchMethod=n,this.numberOfPages=1,this.total=0,this.perPage=e,this.currentPage=0,this.options=r};return n.prototype.calcNumberOfPages=function(n){this.total=n,n<=0?this.numberOfPages=1:this.numberOfPages=Math.floor(n/this.perPage)+(n%this.perPage>0?1:0)},n.prototype.pages=function(){for(var n=[],e=1;e<=this.numberOfPages;e++)this.currentPage===e?n.push(e):this.currentPage<=this.options.maxPagesInner+1?e<=this.options.maxPages&&n.push(e):e>=this.currentPage-this.options.maxPagesInner&&e<=this.currentPage+this.options.maxPagesInner&&n.push(e);return n},n.prototype.previousPage=function(){this.currentPage>1&&this.searchMethod(this.currentPage-1)},n.prototype.nextPage=function(){this.currentPage<this.numberOfPages&&this.searchMethod(this.currentPage+1)},n.prototype.goToPage=function(n){n>=1&&n<=this.numberOfPages&&this.searchMethod(n)},{getInstance:function(e,t,r){return new n(e,t,r)}}}angular.module("ngProdeb").factory("PrPagination",n)}(),function(){angular.module("ngProdeb").component("prSpinner",{template:'\n        <md-progress-linear class="spin-label-component {{::$ctrl.color}}"\n          ng-style="$ctrl.style"\n          md-mode="indeterminate"\n          ng-show="$ctrl.spinner && $ctrl.spinner.show"></md-progress-linear>\n        ',bindings:{position:"@",color:"@"},controller:["$scope",function(n){var e=this;e.$onInit=function(){e.style={position:angular.isDefined(e.position)?e.position:"fixed"},angular.isUndefined(e.color)&&(e.color="md-primary")},e.spinner={show:!1},n.$on("show-spinner",function(){e.spinner={show:!0}}),n.$on("hide-spinner",function(){e.spinner={show:!1}})}]})}(),function(){function n(n){function e(){n.$broadcast("show-spinner")}function t(){n.$broadcast("hide-spinner")}return{show:e,hide:t}}n.$inject=["$rootScope"],angular.module("ngProdeb").factory("PrSpinner",n)}(),function(){function n(n,e,t){function r(e,r,a){if(e){var o={template:'\n            <md-toast>\n              <div class="md-toast-content" md-colors="::{background:\''+r+'\'}">\n                <span class="md-toast-text" flex>'+e+"</span>\n              </div>\n            </md-toast>\n          ",position:"top right"};return angular.isObject(a)&&(o=angular.merge(o,a)),n.show(o)}t.debug("Mensagem para ser exibida no Toast não foi informada")}function a(e){return n.hide(e)}function o(n,e){return r(n,"green",e)}function i(n,t){if(angular.isObject(n)){var a="";e.forIn(n,function(n){a+=l(n)}),n=a}else angular.isArray(n)&&(n=l(n));return r(n,"red-A700",t)}function l(n){var e="";return angular.isArray(n)?n.forEach(function(n){e+=n+"<br/>"}):e+=n+"<br/>",e}function s(n,e,t){d.error(angular.isArray(n)||angular.isObject(n)?n:e,t)}function u(n,e){return r(n,"teal",e)}function c(n,e){return r(n,"warn",e)}var d={success:o,error:i,errorValidation:s,info:u,warn:c,hide:a};return d}n.$inject=["$mdToast","lodash","$log"],angular.module("ngProdeb").factory("PrToast",n)}(),function(){angular.module("ngProdeb").directive("prUploaderBase64",["$q",function(n){var e=Array.prototype.slice;return{restrict:"A",require:"?ngModel",link:function(t,r,a,o){o&&(o.$render=function(){},r.bind("change",function(t){function r(e){var t=n.defer(),r=new FileReader;return r.onload=function(n){t.resolve(n.target.result)},r.onerror=function(n){t.reject(n)},r.readAsDataURL(e),t.promise}var a=t.target;n.all(e.call(a.files,0).map(r)).then(function(n){a.multiple?o.$setViewValue(n):o.$setViewValue(n.length?n[0]:null)})}))}}}])}();
//# sourceMappingURL=data:application/json;base64,
